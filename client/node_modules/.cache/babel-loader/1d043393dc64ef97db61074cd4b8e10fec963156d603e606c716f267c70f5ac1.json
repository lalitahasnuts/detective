{"ast":null,"code":"var _jsxFileName = \"C:\\\\\\u0443\\u0447\\u0451\\u0431\\u0430\\\\\\u0442\\u0440\\u0441\\u043F\\\\blog_api\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [servers, setServers] = useState([]);\n  const [currentServer, setCurrentServer] = useState(null);\n  const [reports, setReports] = useState([]);\n  const [clues, setClues] = useState([]);\n  const [ipTracking, setIpTracking] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [serverIp, setServerIp] = useState('');\n  const [serverPort, setServerPort] = useState('');\n  const [isWsConnected, setIsWsConnected] = useState(false);\n  const [isTcpConnected, setIsTcpConnected] = useState(false);\n  const tcpSocket = useRef(null);\n  const udpSocket = useRef(null);\n  const wsSocket = useRef(null);\n\n  // Подключение к серверу\n  const connectToServer = server => {\n    disconnectFromServer();\n\n    // Все соединения через один порт (3003) с разными путями\n    const baseUrl = `ws://${window.location.hostname}:3003`;\n\n    // TCP-канал (через WS)\n    tcpSocket.current = new WebSocket(`${baseUrl}/tcp`);\n    tcpSocket.current.onopen = () => setIsTcpConnected(true);\n    tcpSocket.current.onclose = () => setIsTcpConnected(false);\n\n    // Канал улик\n    wsSocket.current = new WebSocket(`${baseUrl}/clues`);\n    wsSocket.current.onopen = () => setIsWsConnected(true);\n    wsSocket.current.onclose = () => setIsWsConnected(false);\n\n    // UDP-канал (через WS)\n    udpSocket.current = new WebSocket(`${baseUrl}/udp`);\n  };\n\n  // Отключение от сервера\n  const disconnectFromServer = () => {\n    if (tcpSocket.current) {\n      tcpSocket.current.close();\n      setIsTcpConnected(false);\n    }\n    if (udpSocket.current) udpSocket.current.close();\n    if (wsSocket.current) {\n      wsSocket.current.close();\n      setIsWsConnected(false);\n    }\n    setCurrentServer(null);\n  };\n\n  // Добавление нового сервера\n  const addServer = () => {\n    if (serverIp && serverPort) {\n      const newServer = {\n        id: Date.now(),\n        ip: serverIp,\n        tcpPort: parseInt(serverPort) + 0,\n        udpPort: parseInt(serverPort) + 1,\n        wsPort: parseInt(serverPort) + 2\n      };\n      setServers(prev => [...prev, newServer]);\n      setServerIp('');\n      setServerPort('');\n    }\n  };\n\n  // Удаление сервера\n  const removeServer = id => {\n    setServers(prev => prev.filter(s => s.id !== id));\n    if (currentServer && currentServer.id === id) {\n      disconnectFromServer();\n    }\n  };\n\n  // Отправка отчета на сервер\n  const sendReport = () => {\n    if (!isTcpConnected || !tcpSocket.current) {\n      alert('TCP соединение не установлено!');\n      return;\n    }\n    const reportText = prompt('Введите текст отчета:');\n    if (reportText) {\n      try {\n        tcpSocket.current.send(reportText);\n      } catch (error) {\n        console.error('Ошибка при отправке отчета:', error);\n        alert('Ошибка при отправке отчета. Проверьте соединение.');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u041A\\u0438\\u0431\\u0435\\u0440-\\u0421\\u044B\\u0449\\u0438\\u043A\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"server-management\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0423\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430\\u043C\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"IP \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0430\",\n          value: serverIp,\n          onChange: e => setServerIp(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"\\u0411\\u0430\\u0437\\u043E\\u0432\\u044B\\u0439 \\u043F\\u043E\\u0440\\u0442\",\n          value: serverPort,\n          onChange: e => setServerPort(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addServer,\n          children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"server-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u043E\\u0432:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: servers.map(server => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [server.ip, \":\", server.tcpPort, \"/\", server.udpPort, \"/\", server.wsPort, /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => connectToServer(server),\n              children: (currentServer === null || currentServer === void 0 ? void 0 : currentServer.id) === server.id ? 'Подключен' : 'Подключиться'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => removeServer(server.id),\n              children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 17\n            }, this)]\n          }, server.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), currentServer && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"investigation-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"panel-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"\\u041E\\u0442\\u0447\\u0435\\u0442\\u044B (TCP) \", isTcpConnected ? '✅' : '❌']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendReport,\n          disabled: !isTcpConnected,\n          children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C \\u043E\\u0442\\u0447\\u0435\\u0442\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: reports.map((report, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [report.timestamp, \": \", report.content]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"panel-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"\\u041D\\u043E\\u0432\\u044B\\u0435 \\u0443\\u043B\\u0438\\u043A\\u0438 (WebSocket) \", isWsConnected ? '✅' : '❌']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: clues.map((clue, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [clue.timestamp, \": \", clue.clue]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"panel-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u041E\\u0442\\u0441\\u043B\\u0435\\u0436\\u0438\\u0432\\u0430\\u043D\\u0438\\u0435 IP (UDP)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ipTracking.map((ip, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [ip.timestamp, \": \", ip.content]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"panel-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u0421\\u043E\\u0431\\u044B\\u0442\\u0438\\u044F \\u0434\\u043D\\u044F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: events.map((event, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [event.timestamp, \": \", event.event]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6wzl0jYKgLtezQOJq+G2kyLY+w8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","App","_s","servers","setServers","currentServer","setCurrentServer","reports","setReports","clues","setClues","ipTracking","setIpTracking","events","setEvents","serverIp","setServerIp","serverPort","setServerPort","isWsConnected","setIsWsConnected","isTcpConnected","setIsTcpConnected","tcpSocket","udpSocket","wsSocket","connectToServer","server","disconnectFromServer","baseUrl","window","location","hostname","current","WebSocket","onopen","onclose","close","addServer","newServer","id","Date","now","ip","tcpPort","parseInt","udpPort","wsPort","prev","removeServer","filter","s","sendReport","alert","reportText","prompt","send","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","disabled","report","i","timestamp","content","clue","event","_c","$RefreshReg$"],"sources":["C:/учёба/трсп/blog_api/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [servers, setServers] = useState([]);\n  const [currentServer, setCurrentServer] = useState(null);\n  const [reports, setReports] = useState([]);\n  const [clues, setClues] = useState([]);\n  const [ipTracking, setIpTracking] = useState([]);\n  const [events, setEvents] = useState([]);\n  const [serverIp, setServerIp] = useState('');\n  const [serverPort, setServerPort] = useState('');\n  const [isWsConnected, setIsWsConnected] = useState(false);\n  const [isTcpConnected, setIsTcpConnected] = useState(false);\n  \n  const tcpSocket = useRef(null);\n  const udpSocket = useRef(null);\n  const wsSocket = useRef(null);\n\n  // Подключение к серверу\n  const connectToServer = (server) => {\n    disconnectFromServer();\n  \n    // Все соединения через один порт (3003) с разными путями\n    const baseUrl = `ws://${window.location.hostname}:3003`;\n    \n    // TCP-канал (через WS)\n    tcpSocket.current = new WebSocket(`${baseUrl}/tcp`);\n    tcpSocket.current.onopen = () => setIsTcpConnected(true);\n    tcpSocket.current.onclose = () => setIsTcpConnected(false);\n  \n    // Канал улик\n    wsSocket.current = new WebSocket(`${baseUrl}/clues`);\n    wsSocket.current.onopen = () => setIsWsConnected(true);\n    wsSocket.current.onclose = () => setIsWsConnected(false);\n  \n    // UDP-канал (через WS)\n    udpSocket.current = new WebSocket(`${baseUrl}/udp`);\n  };\n  \n  // Отключение от сервера\n  const disconnectFromServer = () => {\n    if (tcpSocket.current) {\n      tcpSocket.current.close();\n      setIsTcpConnected(false);\n    }\n    if (udpSocket.current) udpSocket.current.close();\n    if (wsSocket.current) {\n      wsSocket.current.close();\n      setIsWsConnected(false);\n    }\n    setCurrentServer(null);\n  };\n  \n  // Добавление нового сервера\n  const addServer = () => {\n    if (serverIp && serverPort) {\n      const newServer = {\n        id: Date.now(),\n        ip: serverIp,\n        tcpPort: parseInt(serverPort) + 0,\n        udpPort: parseInt(serverPort) + 1,\n        wsPort: parseInt(serverPort) + 2\n      };\n      setServers(prev => [...prev, newServer]);\n      setServerIp('');\n      setServerPort('');\n    }\n  };\n  \n  // Удаление сервера\n  const removeServer = (id) => {\n    setServers(prev => prev.filter(s => s.id !== id));\n    if (currentServer && currentServer.id === id) {\n      disconnectFromServer();\n    }\n  };\n  \n  // Отправка отчета на сервер\n  const sendReport = () => {\n    if (!isTcpConnected || !tcpSocket.current) {\n      alert('TCP соединение не установлено!');\n      return;\n    }\n\n    const reportText = prompt('Введите текст отчета:');\n    if (reportText) {\n      try {\n        tcpSocket.current.send(reportText);\n      } catch (error) {\n        console.error('Ошибка при отправке отчета:', error);\n        alert('Ошибка при отправке отчета. Проверьте соединение.');\n      }\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Кибер-Сыщик</h1>\n      <div className=\"server-management\">\n        <h2>Управление серверами</h2>\n        <div>\n          <input \n            type=\"text\" \n            placeholder=\"IP сервера\" \n            value={serverIp}\n            onChange={(e) => setServerIp(e.target.value)}\n          />\n          <input \n            type=\"number\" \n            placeholder=\"Базовый порт\" \n            value={serverPort}\n            onChange={(e) => setServerPort(e.target.value)}\n          />\n          <button onClick={addServer}>Добавить сервер</button>\n        </div>\n        \n        <div className=\"server-list\">\n          <h3>Список серверов:</h3>\n          <ul>\n            {servers.map(server => (\n              <li key={server.id}>\n                {server.ip}:{server.tcpPort}/{server.udpPort}/{server.wsPort}\n                <button onClick={() => connectToServer(server)}>\n                  {currentServer?.id === server.id ? 'Подключен' : 'Подключиться'}\n                </button>\n                <button onClick={() => removeServer(server.id)}>Удалить</button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n      \n      {currentServer && (\n        <div className=\"investigation-panel\">\n          <div className=\"panel-section\">\n            <h2>Отчеты (TCP) {isTcpConnected ? '✅' : '❌'}</h2>\n            <button onClick={sendReport} disabled={!isTcpConnected}>\n              Отправить отчет\n            </button>\n            <ul>\n              {reports.map((report, i) => (\n                <li key={i}>{report.timestamp}: {report.content}</li>\n              ))}\n            </ul>\n          </div>\n          \n          <div className=\"panel-section\">\n            <h2>Новые улики (WebSocket) {isWsConnected ? '✅' : '❌'}</h2>\n            <ul>\n              {clues.map((clue, i) => (\n                <li key={i}>{clue.timestamp}: {clue.clue}</li>\n              ))}\n            </ul>\n          </div>\n          \n          <div className=\"panel-section\">\n            <h2>Отслеживание IP (UDP)</h2>\n            <ul>\n              {ipTracking.map((ip, i) => (\n                <li key={i}>{ip.timestamp}: {ip.content}</li>\n              ))}\n            </ul>\n          </div>\n          \n          <div className=\"panel-section\">\n            <h2>События дня</h2>\n            <ul>\n              {events.map((event, i) => (\n                <li key={i}>{event.timestamp}: {event.event}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}