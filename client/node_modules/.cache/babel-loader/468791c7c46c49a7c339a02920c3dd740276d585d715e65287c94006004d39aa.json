{"ast":null,"code":"const connectToServer = server => {\n  disconnectFromServer();\n  const protocols = ['tcp', 'clues', 'udp'];\n  protocols.forEach(proto => {\n    const socket = new WebSocket(`ws://${server.ip}:${server.port}/${proto}`);\n    socket.onopen = () => {\n      console.log(`${proto.toUpperCase()} соединение установлено`);\n      if (proto === 'tcp') setIsTcpConnected(true);\n      if (proto === 'clues') setIsWsConnected(true);\n    };\n    socket.onmessage = e => {\n      const data = JSON.parse(e.data);\n      switch (proto) {\n        case 'tcp':\n          setReports(prev => [...prev, data].slice(-50));\n          break;\n        case 'clues':\n          setClues(prev => [...prev, data].slice(-20));\n          break;\n        case 'udp':\n          setIpTracking(prev => [...prev, data].slice(-30));\n          break;\n      }\n    };\n    socket.onerror = err => {\n      console.error(`${proto.toUpperCase()} error:`, err);\n    };\n    socket.onclose = () => {\n      if (proto === 'tcp') setIsTcpConnected(false);\n      if (proto === 'clues') setIsWsConnected(false);\n    };\n\n    // Сохраняем сокеты\n    if (proto === 'tcp') tcpSocket.current = socket;\n    if (proto === 'clues') wsSocket.current = socket;\n    if (proto === 'udp') udpSocket.current = socket;\n  });\n};","map":{"version":3,"names":["connectToServer","server","disconnectFromServer","protocols","forEach","proto","socket","WebSocket","ip","port","onopen","console","log","toUpperCase","setIsTcpConnected","setIsWsConnected","onmessage","e","data","JSON","parse","setReports","prev","slice","setClues","setIpTracking","onerror","err","error","onclose","tcpSocket","current","wsSocket","udpSocket"],"sources":["C:/учёба/трсп/blog_api/client/src/App.js"],"sourcesContent":["const connectToServer = (server) => {\n  disconnectFromServer();\n\n  const protocols = ['tcp', 'clues', 'udp'];\n  \n  protocols.forEach(proto => {\n    const socket = new WebSocket(`ws://${server.ip}:${server.port}/${proto}`);\n    \n    socket.onopen = () => {\n      console.log(`${proto.toUpperCase()} соединение установлено`);\n      if (proto === 'tcp') setIsTcpConnected(true);\n      if (proto === 'clues') setIsWsConnected(true);\n    };\n\n    socket.onmessage = (e) => {\n      const data = JSON.parse(e.data);\n      switch(proto) {\n        case 'tcp': \n          setReports(prev => [...prev, data].slice(-50));\n          break;\n        case 'clues':\n          setClues(prev => [...prev, data].slice(-20));\n          break;\n        case 'udp':\n          setIpTracking(prev => [...prev, data].slice(-30));\n          break;\n      }\n    };\n\n    socket.onerror = (err) => {\n      console.error(`${proto.toUpperCase()} error:`, err);\n    };\n\n    socket.onclose = () => {\n      if (proto === 'tcp') setIsTcpConnected(false);\n      if (proto === 'clues') setIsWsConnected(false);\n    };\n\n    // Сохраняем сокеты\n    if (proto === 'tcp') tcpSocket.current = socket;\n    if (proto === 'clues') wsSocket.current = socket;\n    if (proto === 'udp') udpSocket.current = socket;\n  });\n};"],"mappings":"AAAA,MAAMA,eAAe,GAAIC,MAAM,IAAK;EAClCC,oBAAoB,CAAC,CAAC;EAEtB,MAAMC,SAAS,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,CAAC;EAEzCA,SAAS,CAACC,OAAO,CAACC,KAAK,IAAI;IACzB,MAAMC,MAAM,GAAG,IAAIC,SAAS,CAAC,QAAQN,MAAM,CAACO,EAAE,IAAIP,MAAM,CAACQ,IAAI,IAAIJ,KAAK,EAAE,CAAC;IAEzEC,MAAM,CAACI,MAAM,GAAG,MAAM;MACpBC,OAAO,CAACC,GAAG,CAAC,GAAGP,KAAK,CAACQ,WAAW,CAAC,CAAC,yBAAyB,CAAC;MAC5D,IAAIR,KAAK,KAAK,KAAK,EAAES,iBAAiB,CAAC,IAAI,CAAC;MAC5C,IAAIT,KAAK,KAAK,OAAO,EAAEU,gBAAgB,CAAC,IAAI,CAAC;IAC/C,CAAC;IAEDT,MAAM,CAACU,SAAS,GAAIC,CAAC,IAAK;MACxB,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,CAACC,IAAI,CAAC;MAC/B,QAAOb,KAAK;QACV,KAAK,KAAK;UACRgB,UAAU,CAACC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEJ,IAAI,CAAC,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;UAC9C;QACF,KAAK,OAAO;UACVC,QAAQ,CAACF,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEJ,IAAI,CAAC,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;UAC5C;QACF,KAAK,KAAK;UACRE,aAAa,CAACH,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEJ,IAAI,CAAC,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;UACjD;MACJ;IACF,CAAC;IAEDjB,MAAM,CAACoB,OAAO,GAAIC,GAAG,IAAK;MACxBhB,OAAO,CAACiB,KAAK,CAAC,GAAGvB,KAAK,CAACQ,WAAW,CAAC,CAAC,SAAS,EAAEc,GAAG,CAAC;IACrD,CAAC;IAEDrB,MAAM,CAACuB,OAAO,GAAG,MAAM;MACrB,IAAIxB,KAAK,KAAK,KAAK,EAAES,iBAAiB,CAAC,KAAK,CAAC;MAC7C,IAAIT,KAAK,KAAK,OAAO,EAAEU,gBAAgB,CAAC,KAAK,CAAC;IAChD,CAAC;;IAED;IACA,IAAIV,KAAK,KAAK,KAAK,EAAEyB,SAAS,CAACC,OAAO,GAAGzB,MAAM;IAC/C,IAAID,KAAK,KAAK,OAAO,EAAE2B,QAAQ,CAACD,OAAO,GAAGzB,MAAM;IAChD,IAAID,KAAK,KAAK,KAAK,EAAE4B,SAAS,CAACF,OAAO,GAAGzB,MAAM;EACjD,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}